version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: hugdata
      POSTGRES_USER: hugdata
      POSTGRES_PASSWORD: hugdata_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hugdata"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.26.1
    ports:
      - "8080:8080"
      - "50051:50051"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Laravel Application
  laravel:
    build:
      context: ./hugdata-app
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      APP_ENV: production
      APP_DEBUG: false
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: hugdata
      DB_USERNAME: hugdata
      DB_PASSWORD: hugdata_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      QUEUE_CONNECTION: redis
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      WEAVIATE_HOST: http://weaviate:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./hugdata-app/storage:/var/www/storage
      - ./hugdata-app/.env.production:/var/www/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI AI Service
  fastapi:
    build:
      context: ./hugdata-ai
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql://hugdata:hugdata_password@postgres:5432/hugdata
      REDIS_URL: redis://redis:6379/0
      WEAVIATE_URL: http://weaviate:8080
      DAGSTER_HOME: /app/dagster_home
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    volumes:
      - ./hugdata-ai/dagster_home:/app/dagster_home
      - ./hugdata-ai/.env.production:/app/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dagster Web Server
  dagster:
    build:
      context: ./hugdata-ai
      dockerfile: Dockerfile.dagster
    ports:
      - "3001:3001"
    environment:
      DAGSTER_HOME: /app/dagster_home
      DAGSTER_POSTGRES_USER: hugdata
      DAGSTER_POSTGRES_PASSWORD: hugdata_password
      DAGSTER_POSTGRES_HOST: postgres
      DAGSTER_POSTGRES_DB: hugdata
    depends_on:
      postgres:
        condition: service_healthy
      fastapi:
        condition: service_healthy
    volumes:
      - ./hugdata-ai/dagster_home:/app/dagster_home
    command: ["dagster", "dev", "--host", "0.0.0.0", "--port", "3001"]

  # React Frontend
  frontend:
    build:
      context: ./hugdata-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://laravel:8000/api
      REACT_APP_AI_SERVICE_URL: http://fastapi:8003
      NODE_ENV: production
    depends_on:
      laravel:
        condition: service_healthy
      fastapi:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - laravel
      - fastapi
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: hugdata_admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  weaviate_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: hugdata-network