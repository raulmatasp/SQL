name: HugData CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOCKER_REGISTRY: hugdata.example.com
  PHP_VERSION: '8.3'
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.13'

jobs:
  # Static Analysis & Code Quality
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, pgsql, redis
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache PHP dependencies
      uses: actions/cache@v4
      with:
        path: hugdata-app/vendor
        key: php-${{ hashFiles('hugdata-app/composer.lock') }}
        
    - name: Cache Node dependencies
      uses: actions/cache@v4
      with:
        path: hugdata-frontend/node_modules
        key: node-${{ hashFiles('hugdata-frontend/package-lock.json') }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: python-${{ hashFiles('hugdata-ai/requirements.txt') }}
        
    - name: Install Laravel dependencies
      run: |
        cd hugdata-app
        composer install --no-progress --prefer-dist --optimize-autoloader
        
    - name: Install Frontend dependencies
      run: |
        cd hugdata-frontend
        npm ci
        
    - name: Install Python dependencies
      run: |
        cd hugdata-ai
        pip install -r requirements.txt
        
    - name: Laravel Pint (Code Style)
      run: |
        cd hugdata-app
        ./vendor/bin/pint --test
        
    - name: ESLint (Frontend)
      run: |
        cd hugdata-frontend
        npm run lint
        
    - name: Black & Flake8 (Python)
      run: |
        cd hugdata-ai
        black --check .
        flake8 .
        
    - name: TypeScript Check
      run: |
        cd hugdata-frontend
        npm run type-check

  # Laravel Tests
  laravel-tests:
    runs-on: ubuntu-latest
    name: Laravel Tests
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: hugdata_test
          POSTGRES_USER: hugdata
          POSTGRES_PASSWORD: hugdata_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, pgsql, redis
        
    - name: Cache PHP dependencies
      uses: actions/cache@v4
      with:
        path: hugdata-app/vendor
        key: php-${{ hashFiles('hugdata-app/composer.lock') }}
        
    - name: Install dependencies
      run: |
        cd hugdata-app
        composer install --no-progress --prefer-dist --optimize-autoloader
        
    - name: Create test environment file
      run: |
        cd hugdata-app
        cp .env.example .env.testing
        php artisan key:generate --env=testing
        
    - name: Run migrations
      run: |
        cd hugdata-app
        php artisan migrate --env=testing
        
    - name: Run Laravel tests
      run: |
        cd hugdata-app
        php artisan test --coverage --min=80

  # Python Tests
  python-tests:
    runs-on: ubuntu-latest
    name: Python AI Service Tests
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: hugdata_test
          POSTGRES_USER: hugdata
          POSTGRES_PASSWORD: hugdata_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: python-${{ hashFiles('hugdata-ai/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        cd hugdata-ai
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Run Python tests
      run: |
        cd hugdata-ai
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./hugdata-ai/coverage.xml
        directory: ./hugdata-ai/
        flags: python

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Cache Node dependencies
      uses: actions/cache@v4
      with:
        path: hugdata-frontend/node_modules
        key: node-${{ hashFiles('hugdata-frontend/package-lock.json') }}
        
    - name: Install dependencies
      run: |
        cd hugdata-frontend
        npm ci
        
    - name: Run frontend tests
      run: |
        cd hugdata-frontend
        npm run test -- --coverage --watchAll=false
        
    - name: Build frontend
      run: |
        cd hugdata-frontend
        npm run build

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [laravel-tests, python-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: hugdata_test
          POSTGRES_USER: hugdata
          POSTGRES_PASSWORD: hugdata_password
        ports:
          - 5432:5432
          
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, pgsql, redis
        
    - name: Install Python dependencies
      run: |
        cd hugdata-ai
        pip install -r requirements.txt
        pip install pytest requests
        
    - name: Install PHP dependencies
      run: |
        cd hugdata-app
        composer install --no-dev --optimize-autoloader
        
    - name: Start FastAPI service
      run: |
        cd hugdata-ai
        uvicorn main:app --host 0.0.0.0 --port 8003 &
        sleep 10
        
    - name: Start Laravel service
      run: |
        cd hugdata-app
        php artisan serve --port=8000 &
        sleep 10
        
    - name: Run integration tests
      run: |
        python3 -m pytest tests/test_integration.py -v
        
    - name: Health check all services
      run: |
        curl -f http://localhost:8003/health || exit 1
        curl -f http://localhost:8000 || exit 1

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Snyk Security Scan
      uses: snyk/actions/php@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: hugdata-app --severity-threshold=high
        
    - name: Run npm audit
      run: |
        cd hugdata-frontend
        npm audit --audit-level high
        
    - name: Python Security Check
      run: |
        cd hugdata-ai
        pip install safety bandit
        safety check -r requirements.txt
        bandit -r . -f json -o security-report.json || true

  # Build & Deploy
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy
    needs: [code-quality, laravel-tests, python-tests, frontend-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Laravel image
      uses: docker/build-push-action@v5
      with:
        context: ./hugdata-app
        file: ./hugdata-app/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/hugdata-laravel:latest
          ${{ env.DOCKER_REGISTRY }}/hugdata-laravel:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push FastAPI image
      uses: docker/build-push-action@v5
      with:
        context: ./hugdata-ai
        file: ./hugdata-ai/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/hugdata-fastapi:latest
          ${{ env.DOCKER_REGISTRY }}/hugdata-fastapi:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Dagster image
      uses: docker/build-push-action@v5
      with:
        context: ./hugdata-ai
        file: ./hugdata-ai/Dockerfile.dagster
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/hugdata-dagster:latest
          ${{ env.DOCKER_REGISTRY }}/hugdata-dagster:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./hugdata-frontend
        file: ./hugdata-frontend/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/hugdata-frontend:latest
          ${{ env.DOCKER_REGISTRY }}/hugdata-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment script here
        # Example: kubectl apply -f k8s/staging/
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here
        sleep 30
        curl -f https://staging.hugdata.example.com/health || exit 1
        
    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment script here
        # Example: kubectl apply -f k8s/production/
        
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: "HugData deployment ${{ job.status }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

  # Performance Tests (optional, runs on schedule)
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run load tests
      run: |
        echo "Running load tests with Artillery..."
        npm install -g artillery
        # artillery run load-tests.yml
        
    - name: Performance monitoring
      run: |
        echo "Performance monitoring completed"
        # Add performance monitoring script